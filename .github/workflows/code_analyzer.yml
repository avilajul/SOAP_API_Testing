on:
  workflow_call:

jobs:
  sonarqube:
    name: Prepare and Analyze with SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Asegura que todo el historial esté disponible para el análisis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/*.gradle.kts*') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      - name: Run Code Analysis with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Necesario para PRs
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info

#  check-quality-gate:
#    name: Check SonarCloud Quality Gate Status
#    runs-on: ubuntu-latest
#    needs: sonarqube
#    steps:
#      - name: Check SonarCloud Quality Gate Status
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: |
#          PROJECT_KEY=avilajul_SOAP_API_Testing
#          QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: \
#            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
#            | jq -r '.projectStatus.status')
#
#          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
#          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
#            echo "Quality Gate failed!"
#            exit 1
#          fi